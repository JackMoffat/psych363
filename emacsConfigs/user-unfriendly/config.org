#+STARTUP: here's startup
#+STARTUP: overview
#+TITLE: Jack's (Uncle Dave) ein emacs setup
#+CREATOR: Jack m
#+LANGUAGE: en
#+OPTIONS: num:nil
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;




- Should I make this into separate pages of modules for myself?
* Intro 
This file is based heavily off of "Uncle Dave's Emacs", by Dawid 'daedreth' Eckert.


"Here's a sharp knife, why don't you play with it" - 

* Keep GNU GPG Key Updated
to fix the "failed to fix GNU archive" error
#+BEGIN_SRC emacs-lisp
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
(use-package gnu-elpa-keyring-update
:ensure t)
=======
* Questions:
how is the "nice" formatting/indenting of these emacs-lisp blocks applied?
- Should I make this into separate pages of modules for myself?
* Intro 
This file is based heavily off of "Uncle Dave's Emacs", by Dawdi 'daedreth' Eckert.
This config is now built for working with EIN and related packages

"Here's a sharp knife, why don't you play with it" - B.Anderson, 2019


* extending use-package

#+BEGIN_SRC emacs-lisp
(use-package use-package-ensure-system-package
:ensure t)
#+END_SRC



* Emacs Application Framework
wow, this was a task to get working
still not fully working: go here https://github.com/manateelazycat/emacs-application-framework/issues/32
https://github.com/pymupdf/PyMuPDF/issues/358
https://github.com/pymupdf/PyMuPDF/wiki/Ubuntu-Installation-Experience
Huh, hitting tab after el crrently isn't working for me and <  > brackets pair automatically
 TODO this is probably because of eyebrowse or polymode, both of which need to be moved ehre from custom.el
#+BEGIN_SRC emacs-lisp
    ;; require or woould :ensure t work
  (add-to-list 'load-path "~/.emacs.d/site-lisp/emacs-application-framework")

  (use-package eaf
    :custom
    (eaf-find-alternate-file-in-dired t)
    :config
    (eaf-bind-key scroll_up "RET" eaf-pdf-viewer-keybinding)
    (eaf-bind-key scroll_down_page "DEL" eaf-pdf-viewer-keybinding)
    (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
    (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
    (eaf-bind-key take_photo "p" eaf-camera-keybinding)
    (defun eaf-open-google ()
      "Open Google using EAF."
      (interactive)
      (eaf-open-browser "https://www.google.com")))
  (require 'eaf)
#+END_SRC

* UI
** Theme

Add any theme you like.
+BEGIN_SRC emacs-lisp
(use-package dracula-theme
:ensure t)
(setq custom-safe-themes t)
(load-theme 'dracula)
+END_SRC

** Default Browser
Choosing eww
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'eww-browse-url)
#+END_SRC
** Better defaults
#+BEGIN_SRC emacs-lisp
(use-package better-defaults
:ensure t)
#+END_SRC
** frame commands
These are handy for fitting layouts to your own taste
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/config-files/frame-cmds.el")
#+END_SRC


#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<C-s-down>") 'shrink-window)  
(global-set-key (kbd "<C-s-up>") 'enlarge-window)  
(global-set-key (kbd "<C-s-right>") 'shrink-window-horizontally)  
(global-set-key (kbd "<C-s-left>") 'enlarge-window-horizontally)
#+END_SRC


*** Very good information here about making custom window layouts
https://www.gnu.org/software/emacs/manual/html_node/elisp/Frame-Layouts-with-Side-Windows.html

** Customize Keybindings 

Ergoemacs or Xah-fly-keys?
Currently, Xah fly keys si disabled
+BEGIN_SRC emacs-lisp
(use-package xah-fly-keys
:ensure t 
:config
(xah-fly-keys-set-layout "qwerty")
(xah-fly-keys 1)
)
+END_SRC 
** Allow Sudo shell commands to run
From https://stackoverflow.com/questions/2472273/how-do-i-run-a-sudo-command-in-emacs
#+BEGIN_SRC emacs-lisp
(defun sudo-shell-command (command)
  (interactive "MShell command (root): ")
  (with-temp-buffer
    (cd "/sudo::/")
    (async-shell-command command)))
#+END_SRC
** NeoTree
#+BEGIN_SRC emacs-lisp
(use-package neotree
:ensure t)
#+END_SRC
** View directories first in Dired
Pretty straightforward, does as advertised
#+BEGIN_SRC emacs-lisp
(setq dired-listing-switches "-aBhl --group-directories-first")
#+END_SRC

* Basic Interface Settings
These are setting that do not depend on packages and are built-in enhancements to the UI - Directly from UDE
** Better-defaults
#+BEGIN_SRC emacs-lisp
(use-package better-defaults
:ensure t)
#+END_SRC
** Looks
*** Remove lame startup screen
We use an actual replacement for it, keep reading or head directly to =dashboard=.
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
*** Disable menus and scrollbars
If you like using any of those, change =-1= to =1=.
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC
*** Disable bell
This is annoying, remove this line if you like being visually reminded of events.
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
*** Set UTF-8 encoding
#+BEGIN_SRC emacs-lisp 
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC
*** Highligh current line
=hl-line= is awesome! It's not very awesome in the terminal version of emacs though, so we don't use that.
Besides, it's only used for programming.
#+BEGIN_SRC emacs-lisp
  (when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+END_SRC
*** Pretty symbols
Changes =lambda= to an actual symbol and a few others as well, only in the GUI version though.
Disabled for now, makes python c ode slightly harder to read as symbols dont match terms they replace
##+BEGIN_SRC emacs-lisp
  (when window-system
        (use-package pretty-mode
        :ensure t
        :config
        (global-pretty-mode t)))
##+END_SRC

** Functionality
*** Disable backups and auto-saves
I don't use either, you might want to turn those from =nil= to =t= if you do.
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC

*** Change yes-or-no questions into y-or-n questions
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Async
Lets us use asynchronous processes wherever possible, pretty useful.
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init (dired-async-mode 1))

;; add ob-async here?
#+END_SRC

* Dashboard and Projectile
** Dashboard
This is your new startup screen, together with projectile it works in unison and
provides you with a quick look into your latest projects and files.
Change the welcome message to whatever string you want and
change the numbers to suit your liking, I find 5 to be enough.
TODO: make 'pinned' files list

#+BEGIN_SRC emacs-lisp
(if (not (version< emacs-version "26.1"))
  (use-package dashboard
    :ensure t
    :config
      (dashboard-setup-startup-hook)
      ;(setq dashboard-startup-banner "~/.emacs.d/img/dashLogo.png")
      (setq dashboard-items '((recents  . 5)
                              (projects . 5)))

      (setq dashboard-banner-logo-title "")))
#+END_SRC


** Projectile
Projectile is an awesome project manager, mostly because it recognizes directories
with a =.git= directory as projects and helps you manage them accordingly.

*** Enable projectile globally
This makes sure that everything can be a project.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
      (projectile-mode 1))
#+END_SRC

*** Let projectile call make
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'projectile-compile-project)
#+END_SRC


* Modeline 
One modeline-related setting that is missing and is instead placed at the bottom is =diminish=.

** Spaceline!
 I may not use spacemacs, since I do not like evil-mode and find spacemacs incredibly bloated and slow,
 however it would be stupid not to acknowledge the best parts about it, the theme and their modified powerline setup.

 This enables spaceline, it looks better and works very well with my theme of choice.
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
      (setq spaceline-buffer-encoding-abbrev-p nil)
      (setq spaceline-line-column-p nil)
      (setq spaceline-line-p nil)
      (setq powerline-default-separator (quote arrow))
      (spaceline-spacemacs-theme))
#+END_SRC

** No separator!
#+BEGIN_SRC emacs-lisp
  (setq powerline-default-separator nil)
#+END_SRC

** Cursor position
Show the current line and column for your cursor.
We are not going to have =relative-linum-mode= in every major mode, so this is useful.
#+BEGIN_SRC emacs-lisp
  (setq line-number-mode t)
  (setq column-number-mode t)
#+END_SRC

** Clock
If you prefer the 12hr-format, change the variable to =nil= instead of =t=.

*** Time format
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format nil)
  (setq display-time-format "%H:%M - %d %B %Y")
#+END_SRC

*** Enabling the mode
This turns on the clock globally.
#+BEGIN_SRC emacs-lisp
  (display-time-mode 1)
#+END_SRC

** Battery indicator
A package called =fancy-battery= will be used if we are in GUI emacs, otherwise the built in battery-mode will be used.
Fancy battery has very odd colors if used in the tty, hence us disabling it.
#+BEGIN_SRC emacs-lisp
  (use-package fancy-battery
    :ensure t
    :config
      (setq fancy-battery-show-percentage t)
      (setq battery-update-interval 15)
      (if window-system
        (fancy-battery-mode)
        (display-battery-mode)))
#+END_SRC

** System monitor
A teeny-tiny system monitor that can be enabled or disabled at runtime, useful for checking performance
with power-hungry processes in ansi-term

symon can be toggled on and off with =Super + h=.
#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :bind
    ("s-h" . symon-mode))
#+END_SRC

* The terminal
I have used urxvt for years, and I miss it sometimes, but ansi-term is enough for most of my tasks.

** Default shell should be bash
I don't know why this is a thing, but asking me what shell to launch every single
time I open a terminal makes me want to slap babies, this gets rid of it.
This goes without saying but you can replace bash with your shell of choice.
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

** Easy to remember keybinding
In loving memory of bspwm, Super + Enter opens a new terminal, old habits die hard.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC



* Moving around emacs
One of the most important things about a text editor is how efficient you manage
to be when using it, how much time do basic tasks take you and so on and so forth.
One of those tasks is moving around files and buffers, whatever you may use emacs for
you /will/ be jumping around buffers like it's serious business, the following
set of enhancements aims to make it easier.

As a great emacs user once said:

#+BEGIN_QUOTE
Do me the favor, do me the biggest favor, matter of fact do yourself the biggest favor and integrate those into your workflow.
#+END_QUOTE

** a prerequisite for others packages
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (setq ivy-use-virtual-buffers t))
  (use-package ivy-yasnippet
    :after (ivy yasnippet)
    :ensure t
    :config
   ;;(add-hook 'ivy-mode-hook )
              )
#+END_SRC

** scrolling and why does the screen move
I don't know to be honest, but this little bit of code makes scrolling with emacs a lot nicer.
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

** which-key and why I love emacs
Great package, allows key combination options to be displayed after a slight pause in typing one.
- Idle delay set to be very low while learning to use xah-fly-keys 
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t 
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.01)
  )
#+END_SRC

** Window behavior 

*** switch-window
This magnificent package takes care of this issue.
It's unnoticeable if you have <3 panes open, but with 3 or more, upon pressing =C-x o=
you will notice how your buffers turn a solid color and each buffer is asigned a letter
(the list below shows the letters, you can modify them to suit your liking), upon pressing
a letter asigned to a window, your will be taken to said window, easy to remember, quick to use
and most importantly, it annihilates a big issue I had with emacs. An alternative is =ace-window=,
however by default it also changes the behaviour of =C-x o= even if only 2 windows are open,
this is bad, it also works less well with =exwm= for some reason.
#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :ensure t
  :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
        '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
  :bind
    ([remap other-window] . switch-window))
#+END_SRC

*** Following window splits
After you split a window, your focus remains in the previous one.
This annoyed me so much I wrote these two, they take care of it.
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** swiper and why is the default search so lame
Big improvement to searching
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . 'swiper))
#+END_SRC

** buffers and why I hate list-buffers
Another big thing is, buffers. If you use emacs, you use buffers, everyone loves them.
Having many buffers is useful, but can be tedious to work with, let us see how we can improve it.

*** Always murder current buffer
Doing =C-x k= should kill the current buffer at all times, we have =ibuffer= for more sophisticated thing.
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer ()
    "Kills the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC

*** Kill buffers without asking for confirmation
Unless you have the muscle memory, I recommend omitting this bit, as you may lose progress for no reason when working.
BEGIN_SRC emacs-lisp
(setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
END_SRC
Jack: Omitted through removal of code indicator
*** Turn switch-to-buffer into ibuffer
I don't understand how ibuffer isn't the default option by now.
It's vastly superior in terms of ergonomics and functionality, you can delete buffers, rename buffer, move buffers, organize buffers etc.
Jack: get more experience with this?
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC

**** expert-mode
If you feel like you know how ibuffer works and need not to be asked for confirmation after every serious command, enable this as follows.
#+BEGIN_SRC emacs-lisp
(setq ibuffer-expert t)
#+END_SRC
*** close-all-buffers
This can be invoked using =C-M-s-k=. This keybinding makes sure you don't hit it unless you really want to.
#+BEGIN_SRC emacs-lisp
  (defun close-all-buffers ()
    "Kill all buffers without regard for their origin."
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'close-all-buffers)
#+END_SRC

** Relative line numbers - Disabled
Every now and then all of us feel the urge to be productive and write some code.
In the event that this happens, the following bit of configuration makes sure that 
we have access to relative line numbering in programming-related modes.
I highly recommend not enabling =linum-relative-mode= globally, as it messed up 
something like =ansi-term= for instance.
##+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :config
      (setq linum-relative-current-symbol "")
      (add-hook 'prog-mode-hook 'linum-relative-mode))
##+END_SRC


** Helm - re-enabled with originial customizations
Sometimes, you don't realize how good something is until you try it extensively.
I give in, helm is awesome. I'll end up customizing it more eventually,
it's rather similar to ido-vertical though.
*** helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind
    ("C-x C-f" . 'helm-find-files)
    ("C-x C-b" . 'helm-buffers-list)
    ("M-x" . 'helm-M-x)
    :config
    (defun daedreth/helm-hide-minibuffer ()
      (when (with-helm-buffer helm-echo-input-in-header-line)
        (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
          (overlay-put ov 'window (selected-window))
          (overlay-put ov 'face
                       (let ((bg-color (face-background 'default nil)))
                         `(:background ,bg-color :foreground ,bg-color)))
          (setq-local cursor-type nil))))
    (add-hook 'helm-minibuffer-set-up-hook 'daedreth/helm-hide-minibuffer)
    (setq helm-autoresize-max-height 0
          helm-autoresize-min-height 40
          helm-M-x-fuzzy-match t
          helm-buffers-fuzzy-matching t
          helm-recentf-fuzzy-match t
          helm-semantic-fuzzy-match t
          helm-imenu-fuzzy-match t
          helm-split-window-in-side-p nil
          helm-move-to-line-cycle-in-source nil
          helm-ff-search-library-in-sexp t
          helm-scroll-amount 8 
          helm-echo-input-in-header-line t)
    :init
    (helm-mode 1))

  (require 'helm-config)    
  (helm-autoresize-mode 1)
  (define-key helm-find-files-map (kbd "C-b") 'helm-find-files-up-one-level)
  (define-key helm-find-files-map (kbd "C-f") 'helm-execute-persistent-action)
#+END_SRC

** avy - aids movement in buffers
Many times have I pondered how I can move around buffers even quicker.
I'm glad to say, that avy is precisely what I needed, and it's precisely what you need as well.
In short, as you invoke one of avy's functions, you will be prompted for a character
that you'd like to jump to in the /visible portion of the current buffer/.
Afterwards you will notice how all instances of said character have additional letter on top of them.
Pressing those letters, that are next to your desired character will move your cursor over there.
Admittedly, this sounds overly complicated and complex, but in reality takes a split second
and improves your life tremendously.

I like =M-s= for it, same as =C-s= is for moving by searching string, now =M-s= is moving by searching characters.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
      ("M-s" . avy-goto-char))
#+END_SRC



* Text manipulation
Here I shall collect self-made functions that make editing text easier.
Jack: these are all quite nice
** Mark-Multiple
I can barely contain my joy. This extension allows you to quickly mark the next occurence of a region and edit them all at once. Wow!
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :ensure t
    :bind ("C-c q" . 'mark-next-like-this))
#+END_SRC

** Improved kill-word
Why on earth does a function called =kill-word= not .. kill a word.
It instead deletes characters from your cursors position to the end of the word,
let's make a quick fix and bind it properly.
#+BEGIN_SRC emacs-lisp
  (defun daedreth/kill-inner-word ()
    "Kills the entire word your cursor is in. Equivalent to 'ciw' in vim."
    (interactive)
    (forward-char 1)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w k") 'daedreth/kill-inner-word)
#+END_SRC

** Improved copy-word
And again, the same as above but we make sure to not delete the source word.
#+BEGIN_SRC emacs-lisp
  (defun daedreth/copy-whole-word ()
    (interactive)
    (save-excursion
      (forward-char 1)
      (backward-word)
      (kill-word 1)
      (yank)))
  (global-set-key (kbd "C-c w c") 'daedreth/copy-whole-word)
#+END_SRC

** Copy a line
Regardless of where your cursor is, this quickly copies a line.
#+BEGIN_SRC emacs-lisp
  (defun daedreth/copy-whole-line ()
    "Copies a line without regard for cursor position."
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
        (point-at-bol)
        (point-at-eol)))))
  (global-set-key (kbd "C-c l c") 'daedreth/copy-whole-line)
#+END_SRC

** Kill a line
And this quickly deletes a line.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l k") 'kill-whole-line)
#+END_SRC





* Math
** vspinu/company-math
from https://github.com/vspinu/company-math

Note: This currently does not work well when editing latex! because of keybinding <\> interrupting autocomplete
##+BEGIN_SRC emacs-lisp
(with-eval-after-load 'company
(add-to-list 'company-backends 'company-math-symbols-unicode))
##+END_SRC
* Minor conveniences
Emacs is at it's best when it just does things for you, shows you the way, guides you so to speak.
This can be best achieved using a number of small extensions. While on their own they might not be particularly
impressive. Together they create a nice environment for you to work in.

** Visiting the configuration
Quickly edit =~/.emacs.d/config.org=
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC

** Reloading the configuration

Simply pressing =Control-c r= will reload this file, very handy.
You can also manually invoke =config-reload=.
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

** Subwords: Unsure of this one - Jack
Emacs treats camelCase strings as a single word by default, this changes said behaviour.
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC

** Electric - create matching brackets
If you write any code, you may enjoy this.
Typing the first character in a set of 2, completes the second one after your cursor.
Opening a bracket? It's closed for you already. Quoting something? It's closed for you already.

You can easily add and remove pairs yourself, have a look.
#+BEGIN_SRC emacs-lisp
(setq electric-pair-pairs '(
                           (?\{ . ?\})
                           (?\( . ?\))
                           (?\[ . ?\])
                           (?\" . ?\")
                           ))
#+END_SRC

And now to enable it
#+BEGIN_SRC emacs-lisp
(electric-pair-mode t)
#+END_SRC

** Show parens - highlight paired brackets
Highlights matching parens when the cursor is just behind one of them.
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

** Beacon - Highlight cursor on buffer switch
Every time you change buffers, the current position of your cursor will be briefly highlighted now.
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
      (beacon-mode 1))
#+END_SRC

** Rainbow - easier hex color viewing
Mostly useful if you are into web development or game development.
Every time emacs encounters a hexadecimal code that resembles a color, it will automatically highlight
it in the appropriate color. This is a lot cooler than you may think.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
      (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC

** Rainbow delimiters - Disabled for now to test
Colors parentheses and other delimiters depending on their depth, useful for any language using them,
especially lisp.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** Expand region: Unsure exactly of where to use yet but it seemed to help python autocomplete
A pretty simple package, takes your cursor and semantically expands the region, so words, sentences, maybe the contents of some parentheses, it's awesome, try it out.
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC

** Hungry deletion
On the list of things I like doing, deleting big whitespaces is pretty close to the bottom.
Backspace or Delete will get rid of all whitespace until the next non-whitespace character is encountered.
You may not like it, thus disable it if you must, but it's pretty decent.
# #+BEGIN_SRC emacs-lisp
#   (use-package hungry-delete
#     :ensure t
#     :config
#       (global-hungry-delete-mode))
# #+END_SRC

** Zapping to char: Use this one! - Jack
A nifty little package that kills all text between your cursor and a selected character.
A lot more useful than you might think. If you wish to include the selected character in the killed region,
change =zzz-up-to-char= into =zzz-to-char=.
#+BEGIN_SRC emacs-lisp
  (use-package zzz-to-char
    :ensure t
    :bind ("M-z" . zzz-up-to-char))
#+END_SRC

* Kill ring: Good - Jack
There is a lot of customization to the kill ring, and while I have not used it much before,
I decided that it was time to change that.
** Maximum entries on the ring
The default is 60, I personally need more sometimes.
#+BEGIN_SRC emacs-lisp
  (setq kill-ring-max 100)
#+END_SRC

** popup-kill-ring
Out of all the packages I tried out, this one, being the simplest, appealed to me most.
With a simple M-y you can now browse your kill-ring like browsing autocompletion items.
C-n and C-p totally work for this.
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC


* Programming - 
Minor, non-completion related settings and plugins for writing code.

** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
      (use-package yasnippet-snippets
        :ensure t)

      (use-package ivy-yasnippet
        :ensure t)
      (yas-reload-all))
#+END_SRC

** company mode
"I set the delay for company mode to kick in to half a second, I also make sure that
it starts doing its magic after typing in only 2 characters."
Jack - I turned this on while trying to get ein's autoicomplete working

"I prefer =C-n= and =C-p= to move around the items, so I remap those accordingly."
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0.5)
    (setq company-minimum-prefix-length 2)
    (add-hook 'after-init-hook 'global-company-mode))

  (with-eval-after-load 'company
    (define-key company-active-map [return] nil)
    (define-key company-active-map [tab] 'company-complete-common)
    (define-key company-active-map (kbd "TAB") 'company-complete-common)
    (define-key company-active-map (kbd "M-TAB") 'company-complete-selection)
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort))
#+END_SRC
** specific languages - all initially removed
Jack: There are initial settings in here that may be very useful, but I've deleted them all for now.
note - check out the subtrees for bash, emacs-lisp in the original config as they look quite good.
New: just added emacs-lisp and bash
*** Python

If elpy config pyvenv is acting weird:
Make sure the "virtualenvwrapper" package is installed
create virtualenv (not with pyvenv)
run pyvenv-workon
**** Elpy / ein setup
#+BEGIN_SRC emacs-lisp

  (use-package elpy
    :ensure t)
  (use-package flycheck
    :ensure t)
  (use-package py-autopep8
    :ensure t)

  (elpy-enable)

  (when (require 'flycheck nil t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))
  (require 'py-autopep8)
  (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)

  (add-hook 'elpy-mode-hook 'yas-minor-mode)

#+END_SRC
Ok, heres the original just basic ein. Trying this advanced ein now
#+BEGIN_SRC emacs-lisp
;(use-package ein
;:ensure t)
#+END_SRC
This next bit is from https://github.com/millejoh/emacs-ipython-notebook/issues/325
not taken in it's entirety
#+BEGIN_SRC emacs-lisp
  (use-package ein
    :ensure t
    :after (elpy diminish)
    :config (progn
              (setq ein:use-auto-complete t
                    ein:complete-on-dot nil
                    ein:notebook-create-checkpoint-on-save t
                    ein:completion-backend 'ein:use-company-backend
                    ein:console-args '("--simple-prompt"))


              (defun malb/ein-hook ()
                (toggle-truncate-lines t))

              (add-hook 'ein:notebook-multilang-mode-hook #' malb/ein-hook)

              (require 'ein-notebook)

              (bind-key "S-<return>" #'ein:worksheet-execute-cell-and-goto-next ein:notebook-mode-map)
              (bind-key "C-<return>" #'ein:worksheet-execute-cell ein:notebook-mode-map)

              ))
#+END_SRC


#+BEGIN_SRC emacs-lisp


  ;; change virtualenv directory to use conda environments
  ;; should see if it is possible to change this to $HOME
  (setenv "WORKON_HOME" "~/anaconda3/envs")
  ;(pyvenv-activate "default")

  ;;Use IPython for REPL
  (setq python-shell-interpreter "jupyter"
    python-shell-interpreter-args "console --simple-prompt"
    python-shell-prompt-detect-failure-warning nil)

  (add-to-list 'python-shell-completion-native-disabled-interpreters
    "jupyter")

#+END_SRC

*** R

#+BEGIN_SRC emacs-lisp
      (use-package ess
        :ensure t
        :after company              
        :config
        (setq ess-use-company t)
        (add-to-list 'company-backends 'ess-r-company-backends)

  )

    (use-package ess-smart-underscore
      :ensure t)

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (define-skeleton org-skeleton
    "Header info for a emacs-org file."
    "Title: "
    "#+TITLE:" str " \n"
    "#+AUTHOR: Your Name\n"
    "#+email: your-email@server.com\n"
    "#+INFOJS_OPT: \n"
    "#+BABEL: :session *R* :cache yes :results output graphics :exports both :tangle yes \n"
    "-----"
    )
  (global-set-key [C-S-f4] 'org-skeleton)
#+END_SRC
*** emacs-lisp
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
  (add-hook 'emacs-lisp-mode-hook 'company-mode)

  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (setq slime-contribs '(slime-fancy)))

  (use-package slime-company
    :ensure t
    :init
      (require 'company)
      (slime-setup '(slime-fancy slime-company)))
#+END_SRC

*** bash
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'yas-minor-mode)
  (add-hook 'shell-mode-hook 'flycheck-mode)
  (add-hook 'shell-mode-hook 'company-mode)

  (defun shell-mode-company-init ()
    (setq-local company-backends '((company-shell
                                    company-shell-env
                                    company-etags
                                    company-dabbrev-code))))

  (use-package company-shell
    :ensure t
    :config
      (require 'company)
      (add-hook 'shell-mode-hook 'shell-mode-company-init))
#+END_SRC

* Git integration - with Magit
Countless are the times where I opened ansi-term to use =git= on something.
These times are also something that I'd prefer stay in the past, since =magit= is
great. It's easy and intuitive to use, shows its options at a keypress and much more.
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)
    :bind
    ("M-g" . magit-status))
#+END_SRC

* Remote editing: For editing files as root more easily - Jack
I have no need to directly edit files over SSH, but what I do need is a way to edit files as root.
Opening up nano in a terminal as root to play around with grubs default settings is a no-no, this solves that.

** Editing with sudo
Pretty self-explanatory, useful as hell if you use exwm.
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind
      ("s-e" . sudo-edit))
#+END_SRC







* Org - Go through these, but all likely quite useful - Jack
One of the absolute greatest features of emacs is called "org-mode\".
This very file has been written in org-mode, a lot of other configurations are written in org-mode, same goes for
academic papers, presentations, schedules, blogposts and guides.
Org-mode is one of the most complex things ever, lets make it a bit more usable with some basic configuration.


Those are all rather self-explanatory.
** Inline images
#+BEGIN_SRC emacs-lisp
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
(add-hook 'org-mode-hook 'org-display-inline-images)
#+END_SRC
** Org-ref
#+BEGIN_SRC emacs-lisp
(use-package org-ref
:ensure t)
#+END_SRC

** latex-preview-pane
#+BEGIN_SRC emacs-lisp
;;https://emacs.stackexchange.com/questions/9893/how-can-i-export-to-latex-every-time-i-save-an-org-mode-buffer
      (use-package latex-preview-pane
        :ensure t
        :init
        (latex-preview-pane-enable)
        :config
        (defun kdm/org-save-and-export ()
          (interactive)
          (if (and (eq major-mode 'org-mode)
                   (ido-local-file-exists-p (concat (file-name-sans-extension (buffer-name)) ".tex")))
              (org-latex-export-to-latex)))

        (add-hook 'after-save-hook 'kdm/org-save-and-export)
    )








#+END_SRC

** org-babel-load-languages
Do I need to add jupyter here?
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages
                               (append org-babel-load-languages
                                '((python . t)
                                  (R . t)
                                  (latex . t)
                                  (ein . t))
                               ))
#+END_SRC
** Language Source Block Quick Inserts - emacs-lisp, jupyter
*** Base Template
Hitting tab after an <SHORTCUT will insert a LANG block.
For example, <py becomes #+BEGIN_SRC python
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("SHORTCUT" "#+BEGIN_SRC LANG\n?\n#+END_SRC"))
#+END_SRC

*** emacs-lisp
Hitting tab after an "<el" in an org-mode file will create a template for elisp insertion.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

*** R
Hitting tab after an "<r" will insert an R block
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("r" "#+BEGIN_SRC R\n?\n#+END_SRC"))
#+END_SRC


*** Python
Hitting tab after a "<py" will insert a python block
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("py" "#+BEGIN_SRC python\n?\n#+END_SRC"))
#+END_SRC





** Common settings

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  ;; The following lines are always needed.  Choose your own keys.
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-switchb)
#+END_SRC

** Syntax highlighting for documents exported to HTML
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t)
#+END_SRC

** Line wrapping
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
	    '(lambda ()
	       (visual-line-mode 1)))
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c '") 'org-edit-src-code)
  (global-set-key (kbd "C-x f") 'find-file)
#+END_SRC

** Org Bullets
Makes it all look a bit nicer, I hate looking at asterisks.
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** Exporting options
One of the best things about org is the ability to export your file to many formats.
Here is how we add more of them!

*** latex
#+BEGIN_SRC emacs-lisp
  (when (file-directory-p "/usr/share/emacs/site-lisp/tex-utils")
    (add-to-list 'load-path "/usr/share/emacs/site-lisp/tex-utils")
    (require 'xdvi-search))
#+END_SRC
** org-gcal
#+BEGIN_SRC emacs-lisp
; add thing to load calendar file
#+END_SRC
* Diminishing modes: refine as use dictates
Allows modeline to be less cluttered by reducing what appears on it.
*THIS WILL BE REMOVED SOON AS USE-PACKAGE HAS THE FUNCTIONALITY BUILT IN*

Example one:
Edit this list as you see fit!
##+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'which-key-mode)
    (diminish 'linum-relative-mode)
    (diminish 'hungry-delete-mode)
    (diminish 'visual-line-mode)
    (diminish 'subword-mode)
    (diminish 'beacon-mode)
    (diminish 'irony-mode)
    (diminish 'page-break-lines-mode)
    (diminish 'auto-revert-mode)
    (diminish 'rainbow-delimiters-mode)
    (diminish 'rainbow-mode)
    (diminish 'yas-minor-mode)
    ())
##+END_SRC

In-use one:
#+BEGIN_SRC emacs-lisp
  (use-package diminish
  :ensure t
  :init
  (diminish 'which-key-mode)
  (diminish 'hungry-delete-mode)
  (diminish 'rainbow-delimiters-mode)
  (diminish 'rainbow-mode)
  (diminish 'yas-minor-mode)
  )
#+END_SRC


* load email config
disabled and Moved to bottom for nwo to try to fix errors: probably better to specify load order just in the init.el file at that point
##+BEGIN_SRC emacs-lisp
(when (file-readable-p "~/.emacs.d/email.org")
(org-babel-load-file (expand-file-name "~/.emacs.d/email.org")))
##+END_SRC

* Media: excluded for now, add if use dicates, in original file

* TODO:
- inspired by neotree, have a set of open buffers available in a side window would be great
- Defining specific window 
- saving window arrangements in a callable way (or just programming them to variables), and having option to choose window/frame to send buffer to after opened ex. from dired
